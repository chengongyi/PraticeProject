<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tuhu</name>
    </assembly>
    <members>
        <member name="M:Tuhu.AssemblyScaner.ScanAssemblies(System.Func{System.Reflection.AssemblyName,System.Boolean})">
            <summary>Autofac使用Assembly[]</summary>
        </member>
        <member name="T:Tuhu.CertificateReader">
            <summary>https://stackoverflow.com/questions/243646/how-to-read-a-pem-rsa-private-key-from-net</summary>
        </member>
        <member name="M:Tuhu.CertificateReader.UnwrapKey(System.String)">
            <summary>去除前后----内容</summary>
        </member>
        <member name="T:Tuhu.IDataFormatter">
            <summary>数据格式化器</summary>
        </member>
        <member name="M:Tuhu.IDataFormatter.Deserialize``1(System.Byte[])">
            <summary>反序列化</summary>
            <typeparam name="T">类型</typeparam>
            <param name="data">数据</param>
            <returns>对象</returns>
        </member>
        <member name="M:Tuhu.IDataFormatter.Serialize(System.Object)">
            <summary>序列化</summary>
            <param name="objData">对象</param>
            <returns>数据</returns>
        </member>
        <member name="M:Tuhu.DataFormatter.Deserialize``1(System.Byte[])">
            <summary>反序列化</summary>
            <typeparam name="T">类型</typeparam>
            <param name="data">数据</param>
            <returns>对象</returns>
        </member>
        <member name="M:Tuhu.DataFormatter.Serialize(System.Object)">
            <summary>序列化</summary>
            <param name="objData">对象</param>
            <returns>数据</returns>
        </member>
        <member name="T:Tuhu.JsonDataFormatter">
            <summary>数据Json格式化器，使用Json.net</summary>
        </member>
        <member name="P:Tuhu.JsonDataFormatter.Settings">
            <summary>JsonSerializerSettings</summary>
        </member>
        <member name="M:Tuhu.JsonDataFormatter.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Tuhu.JsonDataFormatter.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>ctor</summary>
            <param name="settings">JsonSerializerSettings</param>
        </member>
        <member name="T:Tuhu.XmlDataFormatter">
            <summary>数据二进制格式化器，使用BinaryFormatter</summary>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String)">
            <summary>
            Gets the image URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetMobileUrl(System.String)">
            <summary>
            Gets the mobile URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String,System.Int32)">
            <summary>
            Gets the image URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidthHeight">Maximum height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetMobileUrl(System.String,System.Int32)">
            <summary>
            Gets the mobile URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidthHeight">Maximum height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the image URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetMobileUrl(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the mobile URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>处理图片地址</summary>
            <param name="url">图片地址。绝对地址或相对地址</param>
            <param name="maxWidth">最大宽</param>
            <param name="maxHeight">最大高</param>
            <param name="mobile">是否是用于手机显示</param>
            <returns>处理后的图片地址</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageFormat(System.String)">
            <summary>将输入格式转换成标准输出格式</summary>
            <param name="url"></param>
            <returns>bmp gif psd tiff转换成png</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetProductImage(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the product image.
            </summary>
            <param name="input">The input.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetProductImage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the product image.
            </summary>
            <param name="input">The input.</param>
            <param name="productDefinition">The product definition.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetVehicleImage(System.String,System.Int32)">
            <summary>
            Gets the vehicle image.
            </summary>
            <param name="vehicleId">The vehicle identifier.</param>
            <param name="widthHeight">Height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetVehicleImage(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the vehicle image.
            </summary>
            <param name="vehicleId">The vehicle identifier.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetShopImage(System.String,System.Int32)">
            <summary>
            Gets the shop image.
            </summary>
            <param name="input">The input.</param>
            <param name="widthHeight">Height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetShopImage(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the shop image.
            </summary>
            <param name="input">The input.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetLogoUrlByName(System.String)">
            <summary>
            获取Logo图片地址(汉字转化为拼音)
            </summary>
            <param name="brand">品牌名称</param>
            <returns>Url</returns>
        </member>
        <member name="T:Tuhu.Models.BaseModel">
            <summary>模型基类</summary>
        </member>
        <member name="M:Tuhu.Models.BaseModel.Parse(System.Data.DataRow,System.Reflection.PropertyInfo[])">
            <summary>Parse</summary>
        </member>
        <member name="M:Tuhu.Models.BaseModel.ToString">
            <summary>JSON</summary>
        </member>
        <member name="T:Tuhu.Models.ColumnAttribute">
            <summary>添加额外的名称，属性名优先生效</summary>
        </member>
        <member name="M:Tuhu.Models.ColumnAttribute.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.ColumnAttribute.#ctor(System.String,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.ColumnAttribute.#ctor(System.Type,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.PropertyName">
            <summary>属性名</summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.Aliases">
            <summary>别名</summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.Type">
            <summary></summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.Names">
            <summary>PropertyName + Aliases</summary>
        </member>
        <member name="T:Tuhu.Models.CollectionColumnAttribute">
            <summary>添加额外的名称，属性名优先生效</summary>
        </member>
        <member name="M:Tuhu.Models.CollectionColumnAttribute.#ctor(System.String[],System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.CollectionColumnAttribute.#ctor(System.Type,System.String[],System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="P:Tuhu.Models.CollectionColumnAttribute.Separator">
            <summary>默认[",", ";"]，只支持Array或IEnumerable&lt;&gt;</summary>
        </member>
        <member name="T:Tuhu.Models.JsonColumnAttribute">
            <summary>添加额外的名称，属性名优先生效</summary>
        </member>
        <member name="M:Tuhu.Models.JsonColumnAttribute.#ctor(System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.JsonColumnAttribute.#ctor(System.Type,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="T:Tuhu.Models.Chs2Py">
            <summary>
            汉字转化为拼音
            </summary>
        </member>
        <member name="M:Tuhu.Models.Chs2Py.Pinyin(System.String)">
            <summary>获取拼音</summary>
        </member>
        <member name="T:Tuhu.Models.ModelValidator">
            <summary>ModelValidator</summary>
        </member>
        <member name="M:Tuhu.Models.ModelValidator.TryValidate(System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}@)">
            <summary>可以将result序列化成json</summary>
        </member>
        <member name="T:Tuhu.Models.PagedModel`1">
            <summary>列表模型</summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Tuhu.Models.PagedModel`1.Source">
            <summary>数据模型</summary>
        </member>
        <member name="P:Tuhu.Models.PagedModel`1.Pager">
            <summary>分页模型</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(Tuhu.Models.PagerModel)">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(Tuhu.Models.PagerModel,System.Collections.Generic.IEnumerable{`0})">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(System.Collections.Generic.IEnumerable{`0},Tuhu.Models.PagerModel)">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 System.Collections.Generic.IEnumerator&lt;T&gt;。</returns>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 System.Collections.IEnumerator。</returns>
        </member>
        <member name="T:Tuhu.Models.PagerModel">
            <summary>分页模型</summary>
        </member>
        <member name="M:Tuhu.Models.PagerModel.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagerModel.#ctor(System.Int32)">
            <summary>ctor</summary>
            <param name="currentPage">当前页</param>
        </member>
        <member name="M:Tuhu.Models.PagerModel.#ctor(System.Int32,System.Int32)">
            <summary>ctor</summary>
            <param name="currentPage">当前页</param>
            <param name="pageSize">页大小，默认20</param>
        </member>
        <member name="P:Tuhu.Models.PagerModel.CurrentPage">
            <summary>当前页，默认为第一页</summary>
        </member>
        <member name="P:Tuhu.Models.PagerModel.PageSize">
            <summary>每页数量，默认为20</summary>
        </member>
        <member name="P:Tuhu.Models.PagerModel.Total">
            <summary>总项目数</summary>
        </member>
        <member name="P:Tuhu.Models.PagerModel.TotalPage">
            <summary>总页数</summary>
        </member>
        <member name="P:Tuhu.RefCounter`1.RefCount">
            <summary>初始值是1</summary>
        </member>
        <member name="M:Tuhu.RefCounterPool`2.Remove(`0)">
            <summary>减少引用，如果没有引用了，则返回原来的值</summary>
        </member>
        <member name="T:Tuhu.SecurityHelper">
            <summary>安全性相关类。非对称加密的密钥读取请使用CertificateReader，支持pem和der，如果不支持请转换成pfx</summary>
        </member>
        <member name="M:Tuhu.SecurityHelper.BinaryToHex(System.Byte[])">
            <returns>大写</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.BinaryToHex(System.Byte[],System.Boolean)">
            <summary>
            Binaries to hexadecimal.
            </summary>
            <param name="data">The data.</param>
            <param name="lower">if set to <c>true</c> [lower].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.HexToBinary(System.String)">
            <summary>
            Hexadecimals to binary.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentException">
            输入参数的长度异常，必须是2的倍数
            or
            输入字符串格式错误
            </exception>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String)">
            <summary>MD5加密</summary>
            <param name="inputString">输入内容</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,System.Boolean)">
            <summary>MD5加密</summary>
            <param name="inputString">输入内容</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,Tuhu.HashType)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="hashType">Hash类型</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,Tuhu.HashType,System.Boolean)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="hashType">Hash类型</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,System.Text.Encoding)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="encoding">编码类型</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,System.Text.Encoding,System.Boolean)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="encoding">编码类型</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,Tuhu.HashType,System.Text.Encoding,System.Boolean)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="hashType">Hash类型</param>
            <param name="encoding">编码类型</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.Byte[])">
            <summary>Hash加密</summary>
            <param name="buffer">输入内容</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.Byte[],Tuhu.HashType)">
            <summary>Hash加密</summary>
            <param name="buffer">输入内容</param>
            <param name="hashType">Hash类型</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetHashAlgorithm(Tuhu.HashType,System.String)">
            <summary>有key时则使用HMCA***</summary>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetHashAlgorithm(Tuhu.HashType,System.Byte[])">
            <summary>有key时则使用HMCA***</summary>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetSymmetricAlgorithm(System.String,System.String)">
            <summary>获取对称算法</summary>
            <param name="key">key</param>
            <param name="iv">iv</param>
            <returns>算法</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetSymmetricAlgorithm(System.Byte[],System.Byte[])">
            <summary>获取对称算法</summary>
            <param name="key">key</param>
            <param name="iv">iv</param>
            <returns>算法</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetSymmetricAlgorithm(Tuhu.SymmetricAlgorithmType,System.String,System.String)">
            <summary>获取对称算法</summary>
            <param name="type">算法类型，默认Aes</param>
            <param name="key">key</param>
            <param name="iv">iv</param>
            <returns>算法</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetSymmetricAlgorithm(Tuhu.SymmetricAlgorithmType,System.Byte[],System.Byte[])">
            <summary>获取对称算法</summary>
            <param name="type">算法类型，默认Aes</param>
            <param name="key">key</param>
            <param name="iv">iv</param>
            <returns>算法</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Decrypts the specified base64 string.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="base64String">The base64 string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypts the specified encrypted buffer.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="encryptedBuffer">The encrypted buffer.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Encrypts the specified buffer.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:Tuhu.HashType">
            <summary>HashType</summary>
        </member>
        <member name="F:Tuhu.HashType.Md5">
            <summary>MD5</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha1">
            <summary>SHA1</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha256">
            <summary>SHA256</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha384">
            <summary>SHA384</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha512">
            <summary>SHA512</summary>
        </member>
        <member name="T:Tuhu.SymmetricAlgorithmType">
            <summary>
            Enum SymmetricAlgorithmType
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Aes">
            <summary>
            The aes
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Des">
            <summary>
            The DES
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Rc2">
            <summary>
            The RC2
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.TripleDes">
            <summary>
            The triple DES
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Rijndael">
            <summary>
            The rijndael
            </summary>
        </member>
        <member name="M:Tuhu.Security.IPasswordHasher.VerifyPassword(System.String,System.String)">
            <returns>Failed = 0,Success = 1,SuccessRehashNeeded = 2</returns>
        </member>
        <member name="M:Tuhu.Security.DefaultPasswordHasher.GenerateSaltValue(System.Int32)">
            <param name="length">默认4</param>
        </member>
        <member name="M:Tuhu.Security.DefaultPasswordHasher.GetSaltValue(System.String,System.Int32)">
            <param name="hashedPassword">hash后的密码</param>
            <param name="length">默认4</param>
        </member>
        <member name="T:Tuhu.ServiceResolver">
            <summary>为了解决一些地方实在没办法注入而出此下策，比如log4net、System.Configuration.ConfigurationSection</summary>
        </member>
        <member name="T:Tuhu.ZipHelper">
            <summary>压缩解压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.String,System.String)">
            <summary>压缩到档案</summary>
            <param name="outputFile">档案位置</param>
            <param name="fileOrDirectory">文件或文件夹</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="outputFile">档案位置</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="outputFile">档案位置</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
            <param name="ignoreFilesOrDirectories">过滤的文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.IO.Stream,System.String)">
            <summary>压缩到档案</summary>
            <param name="output">输出流</param>
            <param name="fileOrDirectory">文件或文件夹</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.IO.Stream,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="output">输出流</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.IO.Stream,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="output">输出流</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
            <param name="ignoreFilesOrDirectories">过滤的文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Dezip(System.String,System.String)">
            <summary>解压缩到档案</summary>
            <param name="inputFile">输入文档</param>
            <param name="outputDirectory">输出目录</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Dezip(System.IO.Stream,System.String)">
            <summary>解压缩到档案</summary>
            <param name="inputStream">输入流</param>
            <param name="outputDirectory">输出目录</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Compress(System.Byte[])">
            <summary>Gzip压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Compress(System.IO.Stream)">
            <summary>Gzip压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.CompressAsync(System.IO.Stream)">
            <summary>Gzip压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Decompress(System.Byte[])">
            <summary>Gzip解压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Decompress(System.IO.Stream)">
            <summary>Gzip解压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.DecompressAsync(System.IO.Stream)">
            <summary>Gzip解压缩</summary>
        </member>
        <member name="M:System.Threading.AsyncLock.#ctor(System.Int32)">
            <param name="parallelCount">并行数量，默认1</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.AsApm``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>https://msdn.microsoft.com/zh-cn/library/hh873178(v=vs.110).aspx </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.WaitOneAsync(System.Threading.WaitHandle)">
            <summary>WaitHandle转为Task。反转：WaitHandle wh = ((IAsyncResult)task).AsyncWaitHandle;</summary>
            <returns>Task</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.WaitOneAsync(System.Threading.WaitHandle,System.Int32)">
            <summary>WaitHandle转为Task。反转：WaitHandle wh = ((IAsyncResult)task).AsyncWaitHandle;</summary>
            <returns>Task</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.WaitOneAsync(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>WaitHandle转为Task。反转：WaitHandle wh = ((IAsyncResult)task).AsyncWaitHandle;</summary>
            <returns>Task</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.GetAwaiter(System.Threading.CancellationToken)">
            <summary>
            Gets the awaiter.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>TaskAwaiter.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
            <remarks>不要对已经开始的Task进行限制，比如List&lt;Task&gt;，因为Task已经开始了。</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
            <remarks>不要对已经开始的Task进行限制，比如List&lt;Task&gt;，因为Task已经开始了。</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{``1}},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量。</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量。</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量。如果方法并非真正异步方法，则可能变成串行执行</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="T:System.Threading.Tasks.AsyncHelper">
            <summary>
            Class AsyncHelper.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>在同步方法中不死锁方式调用异步方法</summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>在同步方法中不死锁方式调用异步方法</summary>
        </member>
        <member name="M:System.Threading.IDistributedLock.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.IDistributedLock.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.IDistributedLock.Release">
            <summary>释放锁</summary>
        </member>
        <member name="M:System.Threading.IDistributedLock.ReleaseAsync">
            <summary>释放锁</summary>
        </member>
        <member name="M:System.Threading.IDistributedLock.TryLock">
            <summary>尝试获取锁，不等待。如果获取到则返回true，获取失败则返回false</summary>
        </member>
        <member name="M:System.Threading.IDistributedLock.TryLockAsync">
            <summary>尝试获取锁，不等待。如果获取到则返回true，获取失败则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.Wait(System.Threading.IDistributedLock)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.Wait(System.Threading.IDistributedLock,System.Threading.CancellationToken)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.Wait(System.Threading.IDistributedLock,System.TimeSpan)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.Wait(System.Threading.IDistributedLock,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.Wait(System.Threading.IDistributedLock,System.Int32)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.WaitAsync(System.Threading.IDistributedLock)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.WaitAsync(System.Threading.IDistributedLock,System.Threading.CancellationToken)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.WaitAsync(System.Threading.IDistributedLock,System.TimeSpan)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.WaitAsync(System.Threading.IDistributedLock,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="M:System.Threading.DistributedLockExtensions.WaitAsync(System.Threading.IDistributedLock,System.Int32)">
            <summary>如果在指定的时间内获取到锁则返回true，否则返回false</summary>
        </member>
        <member name="T:System.Threading.DistributedLock">
            <summary>分页式锁</summary>
        </member>
        <member name="P:System.Threading.DistributedLock.Key">
            <summary>锁Key</summary>
        </member>
        <member name="M:System.Threading.DistributedLock.Release">
            <inheritdoc />
        </member>
        <member name="M:System.Threading.DistributedLock.ReleaseAsync">
            <inheritdoc />
        </member>
        <member name="M:System.Threading.DistributedLock.TryLock">
            <inheritdoc />
        </member>
        <member name="M:System.Threading.DistributedLock.TryLockAsync">
            <inheritdoc />
        </member>
        <member name="M:System.Threading.DistributedLock.Wait(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:System.Threading.DistributedLock.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.DataExtensions">
            <summary>DataExtension</summary>
        </member>
        <member name="M:System.Data.DataExtensions.HasValue(System.Data.DataRow,System.String)">
            <summary>判断列是否有值</summary>
            <param name="row">对象</param>
            <param name="columnName">列名</param>
            <returns>是否存在值</returns>
        </member>
        <member name="M:System.Data.DataExtensions.HasValue(System.Data.DataRow,System.Int32)">
            <summary>判断列是否有值</summary>
            <param name="row">对象</param>
            <param name="columnIndex">列号</param>
            <returns>是否存在值</returns>
        </member>
        <member name="M:System.Data.DataExtensions.GetValue``1(System.Data.DataRow,System.String)">
            <summary>获得值</summary>
            <typeparam name="T">类型</typeparam>
            <param name="row">对象</param>
            <param name="columnName">列名</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtensions.GetValue``1(System.Data.DataRow,System.Int32)">
            <summary>获得值</summary>
            <typeparam name="T">类型</typeparam>
            <param name="row">对象</param>
            <param name="columnIndex">列名</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtensions.GetValue(System.Data.DataRow,System.String)">
            <summary>获得值</summary>
            <param name="row">对象</param>
            <param name="columnName">列名</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtensions.GetValue(System.Data.DataRow,System.Int32)">
            <summary>获得值</summary>
            <param name="row">对象</param>
            <param name="columnIndex">列号</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtensions.ToDictionary(System.Data.DataRow)">
            <summary>将行转换成字典</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToDictionary(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>将行转换成字典列表</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToDictionary(System.Data.DataTable)">
            <summary>将表转换成字典列表</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToDictionary``2(System.Data.DataTable)">
            <summary>将表第一列做Key、第二列做Value组成字典</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToDictionary``2(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>将表指定的两列组成字典</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToDictionary``2(System.Data.DataTable,System.String,System.String)">
            <summary>将表指定的两列组成字典</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToList``1(System.Data.DataTable)">
            <summary>取出表第一列值</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToList``1(System.Data.DataTable,System.Int32)">
            <summary>取出表指定列值</summary>
        </member>
        <member name="M:System.Data.DataExtensions.ToList``1(System.Data.DataTable,System.String)">
            <summary>取出表指定列值</summary>
        </member>
        <member name="T:System.Collections.Specialized.NameValueCollectionExtensions">
            <summary>名值或键值扩展</summary>
        </member>
        <member name="M:System.Collections.Specialized.NameValueCollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>将名值转换成键值</summary>
            <param name="collection">数据源</param>
            <returns>键值集合</returns>
        </member>
        <member name="M:System.Collections.Specialized.NameValueCollectionExtensions.ToQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>将名值集合转换成字符串，key1=value1&amp;key2=value2，k/v会编码</summary>
            <param name="collection">数据源</param>
            <returns>字符串</returns>
        </member>
        <member name="T:System.Collections.Generic.KeyValueExtensions">
            <summary>名值或键值扩展</summary>
        </member>
        <member name="M:System.Collections.Generic.KeyValueExtensions.ToQueryString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>将键值集合转换成字符串，key1=value1&amp;key2=value2，k/v会编码</summary>
            <param name="source">数据源</param>
            <returns>字符串</returns>
        </member>
        <member name="M:System.Collections.Generic.KeyValueExtensions.ToSignString(System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>将键值集合转换成签名字符串，key1=value1&amp;key2=value2，不编码</summary>
            <param name="source">数据源</param>
            <returns>字符串</returns>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary></summary>
        </member>
        <member name="M:System.ExceptionExtensions.UnwrapException(System.Exception)">
            <summary>解开AggregateException</summary>
        </member>
        <member name="M:System.ExceptionExtensions.ToFriendlyString(System.Exception)">
            <summary>过滤掉Task调用</summary>
        </member>
        <member name="T:System.Net.Http.BasicAuthenticationHeaderValue">
            <inheritdoc />
            <summary>Basic Authentication HeaderValue</summary>
            <seealso cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />
        </member>
        <member name="M:System.Net.Http.BasicAuthenticationHeaderValue.#ctor(System.String,System.String)">
            <inheritdoc />
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:System.Net.Http.HttpClientExtensions">
            <summary>
            Class HttpClientExtensions.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.SetBasicAuthentication(System.Net.Http.HttpClient,System.String,System.String)">
            <summary>
            Sets the basic authentication.
            </summary>
            <param name="client">The client.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.SetBearerToken(System.Net.Http.HttpClient,System.String)">
            <summary>
            Sets the bearer token.
            </summary>
            <param name="client">The client.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.SetToken(System.Net.Http.HttpClient,System.String,System.String)">
            <summary>
            Sets the token.
            </summary>
            <param name="client">The client.</param>
            <param name="scheme">The scheme.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PostAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>Posts as form.</summary>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PostAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String[])">
            <summary>
            Posts as form. <see href="https://stackoverflow.com/questions/18059588/httpclient-multipart-form-post-in-c-sharp">See here</see>.
            </summary>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <param name="filesPath">The files path.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PostAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            Posts as form. <see href="https://stackoverflow.com/questions/18059588/httpclient-multipart-form-post-in-c-sharp">See here</see>.
            </summary>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <param name="files">The files. Key: File name, value: file read stream.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PutAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>Puts as form.</summary>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PutAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String[])">
            <summary>
            Puts as form. <see href="https://stackoverflow.com/questions/18059588/httpclient-multipart-form-post-in-c-sharp">See here</see>.
            </summary>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <param name="filesPath">The files path.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PutAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            Puts as form. <see href="https://stackoverflow.com/questions/18059588/httpclient-multipart-form-post-in-c-sharp">See here</see>.
            </summary>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <param name="files">The files. Key: File name, value: file read stream.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="T:System.Linq.LinqExtensions">
            <summary>
            	Adds behavior to System.Linq.
            </summary>
        </member>
        <member name="F:System.Linq.LinqExtensions.Self`1.Func">
            <summary>_ => _</summary>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Enumerates the sequence and invokes the given action for each value in the sequence.</summary>
            <typeparam name="T">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element.</param>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>Enumerates the sequence and invokes the given action for each value in the sequence.</summary>
            <typeparam name="T">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element.</param>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>Enumerates the sequence and invokes the given action for each value in the sequence.</summary>
            <typeparam name="T">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element.</param>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})">
            <summary>Enumerates the sequence and invokes the given action for each value in the sequence.</summary>
            <typeparam name="T">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element.</param>
        </member>
        <member name="M:System.Linq.LinqExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Where item not null.</summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.ThenByDescending``1(System.Linq.IOrderedEnumerable{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.ThenByDescending``1(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.Unwrap(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>Eaches the specified enumeration.</summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.Unwrap``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>Eaches the specified enumeration.</summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>将一维集合分割成二维集合</summary>
        </member>
        <member name="M:System.Linq.LinqExtensions.SplitWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>将一维集合分割成二维集合</summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate">true：当前集合的最后一个元素</param>
        </member>
        <member name="M:System.Linq.LinqExtensions.SplitWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Int32,System.Boolean})">
            <summary>将一维集合分割成二维集合</summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate">true：当前集合的最后一个元素</param>
        </member>
        <member name="M:System.RandomExtensions.Weight``1(System.Random,System.Collections.Generic.IReadOnlyDictionary{``0,System.Byte})">
            <summary>权重随机</summary>
        </member>
        <member name="M:System.RandomExtensions.Weight``1(System.Random,System.Collections.Generic.IReadOnlyDictionary{``0,System.Int32})">
            <summary>权重随机</summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.CompositeValidationResult">
            <inheritdoc />
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.CompositeValidationResult.Results">
            <summary>Results</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CompositeValidationResult.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CompositeValidationResult.#ctor(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CompositeValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.CollectionValidationResult">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CollectionValidationResult.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CollectionValidationResult.#ctor(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CollectionValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
            <inheritdoc />
        </member>
        <member name="T:System.LogicalStringComparer">
            <summary>逻辑字符串比较，2string比20string小</summary>
        </member>
        <member name="P:System.LogicalStringComparer.Default">
            <summary>忽略大小写</summary>
        </member>
        <member name="P:System.LogicalStringComparer.ComparisonType">
            <summary>比较方式</summary>
        </member>
        <member name="M:System.LogicalStringComparer.#ctor">
            <inheritdoc />
        </member>
        <member name="M:System.LogicalStringComparer.#ctor(System.StringComparison)">
            <summary>ctor</summary>
            <param name="comparisonType">比较方式</param>
        </member>
        <member name="M:System.LogicalStringComparer.Compare(System.String,System.String)">
            <summary>比较字符串</summary>
        </member>
        <member name="M:System.LogicalStringComparer.Equals(System.String,System.String)">
            <summary>字符串是否相等</summary>
        </member>
        <member name="M:System.LogicalStringComparer.GetHashCode(System.String)">
            <summary>GetHashCode</summary>
        </member>
        <member name="T:System.SuccessfulLazy`1">
            <summary>Provides support for lazy initialization until success.</summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
        </member>
        <member name="M:System.SuccessfulLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.SuccessfulLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="P:System.SuccessfulLazy`1.IsValueCreated">
            <summary>
            Gets a value indicating whether this instance is value created.
            </summary>
            <value><c>true</c> if this instance is value created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.SuccessfulLazy`1.Value">
            <summary>如果创建value时报错则会一直创建。</summary>
        </member>
        <member name="M:System.SuccessfulLazy`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.LogExtensions">
            <summary>LogExtension</summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LogExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>Debug级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LogExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>Error级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LogExtensions.Fatal(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>Fatal级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LogExtensions.Info(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>Info级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LogExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>Trace级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LogExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
    </members>
</doc>
