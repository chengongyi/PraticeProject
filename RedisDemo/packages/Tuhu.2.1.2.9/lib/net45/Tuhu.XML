<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tuhu</name>
    </assembly>
    <members>
        <member name="M:System.Collections.Generic.CollectionExtension.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>将一维集合分割成二维集合</summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtension.SplitWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>将一维集合分割成二维集合</summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate">true：当前集合的最后一个元素</param>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtension.SplitWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Int32,System.Boolean})">
            <summary>将一维集合分割成二维集合</summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate">true：当前集合的最后一个元素</param>
        </member>
        <member name="T:System.Collections.Generic.KeyValueExtension">
            <summary>名值或键值扩展</summary>
        </member>
        <member name="M:System.Collections.Generic.KeyValueExtension.ToHtmlString``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>将键值集合转换成字符串</summary>
            <param name="source">数据源</param>
            <returns>字符串</returns>
        </member>
        <member name="T:System.Collections.Specialized.KeyValueExtension">
            <summary>名值或键值扩展</summary>
        </member>
        <member name="M:System.Collections.Specialized.KeyValueExtension.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>将名值转换成键值</summary>
            <param name="collection">数据源</param>
            <returns>键值集合</returns>
        </member>
        <member name="M:System.Collections.Specialized.KeyValueExtension.ToHtmlString(System.Collections.Specialized.NameValueCollection)">
            <summary>将名值集合转换成字符串</summary>
            <param name="collection">数据源</param>
            <returns>字符串</returns>
        </member>
        <member name="M:System.Data.DbCommandExtension.AddParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>add DbParameter</summary>
        </member>
        <member name="M:System.Data.DbCommandExtension.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection)">
            <summary>add DbParameter</summary>
        </member>
        <member name="M:System.Data.DbCommandExtension.AddParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Data.ParameterDirection)">
            <summary>add DbParameter</summary>
        </member>
        <member name="T:System.Data.DataExtension">
            <summary>DataExtension</summary>
        </member>
        <member name="M:System.Data.DataExtension.HasValue(System.Data.DataRow,System.String)">
            <summary>判断列是否有值</summary>
            <param name="row">对象</param>
            <param name="columnName">列名</param>
            <returns>是否存在值</returns>
        </member>
        <member name="M:System.Data.DataExtension.HasValue(System.Data.DataRow,System.Int32)">
            <summary>判断列是否有值</summary>
            <param name="row">对象</param>
            <param name="columnIndex">列号</param>
            <returns>是否存在值</returns>
        </member>
        <member name="M:System.Data.DataExtension.GetValue``1(System.Data.DataRow,System.String)">
            <summary>获得值</summary>
            <typeparam name="T">类型</typeparam>
            <param name="row">对象</param>
            <param name="columnName">列名</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtension.GetValue``1(System.Data.DataRow,System.Int32)">
            <summary>获得值</summary>
            <typeparam name="T">类型</typeparam>
            <param name="row">对象</param>
            <param name="columnIndex">列名</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtension.GetValue(System.Data.DataRow,System.String)">
            <summary>获得值</summary>
            <param name="row">对象</param>
            <param name="columnName">列名</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtension.GetValue(System.Data.DataRow,System.Int32)">
            <summary>获得值</summary>
            <param name="row">对象</param>
            <param name="columnIndex">列号</param>
            <returns>值</returns>
        </member>
        <member name="M:System.Data.DataExtension.ToDictionary(System.Data.DataRow)">
            <summary>将行转换成字典</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToDictionary(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>将行转换成字典列表</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToDictionary(System.Data.DataTable)">
            <summary>将表转换成字典列表</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToDictionary``2(System.Data.DataTable)">
            <summary>将表第一列做Key、第二列做Value组成字典</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToDictionary``2(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>将表指定的两列组成字典</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToDictionary``2(System.Data.DataTable,System.String,System.String)">
            <summary>将表指定的两列组成字典</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToList``1(System.Data.DataTable)">
            <summary>取出表第一列值</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToList``1(System.Data.DataTable,System.Int32)">
            <summary>取出表指定列值</summary>
        </member>
        <member name="M:System.Data.DataExtension.ToList``1(System.Data.DataTable,System.String)">
            <summary>取出表指定列值</summary>
        </member>
        <member name="T:System.Web.KeyValueExtension">
            <summary>名值或键值扩展</summary>
        </member>
        <member name="T:System.Linq.LinqExtensions">
            <summary>
            	Adds behavior to System.Linq.
            </summary>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            	Eaches the specified enumeration.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "source">The enumeration.</param>
            <param name = "action">The action.</param>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Fors the each asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="body">The body.</param>
            <returns></returns>
        </member>
        <member name="M:System.RandomExtension.Weight``1(System.Random,System.Collections.Generic.IReadOnlyDictionary{``0,System.Byte})">
            <summary>权重随机</summary>
        </member>
        <member name="M:System.RandomExtension.Weight``1(System.Random,System.Collections.Generic.IReadOnlyDictionary{``0,System.Int32})">
            <summary>权重随机</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension">
            <summary>
            RSACryptoServiceProvider Extension
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.LoadPublicKeyDER(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>Extension method which initializes an RSACryptoServiceProvider from a DER public key blob.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.LoadPublicKeyPEM(System.Security.Cryptography.RSACryptoServiceProvider,System.String)">
            <summary>Extension method which initializes an RSACryptoServiceProvider from a PEM public key string.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.GetPublicKeyBlobFromRSA(System.Byte[])">
            <summary>Returns a public key blob from an RSA public key.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.GetRSAFromDER(System.Byte[])">
            <summary>Converts DER binary format to a CAPI CERT_PUBLIC_KEY_INFO structure containing an RSA key.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.GetDERFromPEM(System.String)">
            <summary>Extracts the binary data from a PEM file.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_ACQUIRE_CONTEXT_FLAGS">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_PROVIDER_TYPE">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_DECODE_FLAGS">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_ENCODING_FLAGS">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_OUTPUT_TYPES">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_STRING_FLAGS">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_OBJID_BLOB">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_ALGORITHM_IDENTIFIER">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_BIT_BLOB">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProviderExtension.CERT_PUBLIC_KEY_INFO">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.CryptDestroyKey(System.IntPtr)">
            <summary>Function for Crypto API.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.CryptImportKey(System.IntPtr,System.Byte[],System.UInt32,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>Function for Crypto API.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.CryptReleaseContext(System.IntPtr,System.Int32)">
            <summary>Function for Crypto API.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.CryptAcquireContext(System.IntPtr@,System.String,System.String,System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_PROVIDER_TYPE,System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_ACQUIRE_CONTEXT_FLAGS)">
            <summary>Function for Crypto API.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.CryptStringToBinary(System.String,System.UInt32,System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_STRING_FLAGS,System.Byte[],System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Function from Crypto API.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.CryptDecodeObjectEx(System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_ENCODING_FLAGS,System.IntPtr,System.Byte[],System.UInt32,System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_DECODE_FLAGS,System.IntPtr,System.Byte[]@,System.UInt32@)">
            <summary>Function from Crypto API.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProviderExtension.CryptDecodeObject(System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_ENCODING_FLAGS,System.IntPtr,System.Byte[],System.UInt32,System.Security.Cryptography.RSACryptoServiceProviderExtension.CRYPT_DECODE_FLAGS,System.Byte[],System.UInt32@)">
            <summary>Function from Crypto API.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.AsApm``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>https://msdn.microsoft.com/zh-cn/library/hh873178(v=vs.110).aspx </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.WaitOneAsync(System.Threading.WaitHandle)">
            <summary>WaitHandle转为Task。反转：WaitHandle wh = ((IAsyncResult)task).AsyncWaitHandle;</summary>
            <returns>Task</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.GetAwaiter(System.Threading.CancellationToken)">
            <summary>
            Gets the awaiter.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>TaskAwaiter.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelInvoke``1(System.Collections.Generic.IEnumerable{System.Func{System.Threading.Tasks.Task{``0}}},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="funcs">The funcs.</param>
            <param name="maxInvoke">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelInvoke(System.Collections.Generic.IEnumerable{System.Func{System.Threading.Tasks.Task}},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="funcs">The funcs.</param>
            <param name="maxInvoke">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
            <remarks>不要对已经开始的Task进行限制，比如List&lt;Task&gt;，因为Task已经开始了。</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
            <remarks>不要对已经开始的Task进行限制，比如List&lt;Task&gt;，因为Task已经开始了。</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{``1}},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量。</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量。</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtension.ParallelSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Int32)">
            <summary>使用信号号方式限制异步方法并发量</summary>
            <param name="source">一个值序列，要对该序列调用转换函数。</param>
            <param name="selector">应用于每个元素的转换函数。</param>
            <param name="token">The token.</param>
            <param name="maxParallel">最大并行执行量，≤1时为CPU核心数量</param>
        </member>
        <member name="T:System.Threading.Tasks.AsyncHelper">
            <summary>
            Class AsyncHelper.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>在同步方法中不死锁方式调用异步方法</summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>在同步方法中不死锁方式调用异步方法</summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.CompositeValidationResult">
            <summary>验证</summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.CompositeValidationResult.Results">
            <summary>Results</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CompositeValidationResult.#ctor(System.String)">
            <summary>ctor</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CompositeValidationResult.#ctor(System.String,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CompositeValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>ctor</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CompositeValidationResult.AddResult(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>ctor</summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.CollectionValidationResult">
            <summary>验证</summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.CollectionValidationResult.Results">
            <summary>Results</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CollectionValidationResult.#ctor(System.String)">
            <summary>ctor</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CollectionValidationResult.#ctor(System.String,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CollectionValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>ctor</summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CollectionValidationResult.AddResults(System.Int32,System.Collections.Generic.IReadOnlyCollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>ctor</summary>
        </member>
        <member name="T:System.SuccessfulLazy`1">
            <summary>Provides support for lazy initialization until success.</summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
        </member>
        <member name="M:System.SuccessfulLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.SuccessfulLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="P:System.SuccessfulLazy`1.IsValueCreated">
            <summary>
            Gets a value indicating whether this instance is value created.
            </summary>
            <value><c>true</c> if this instance is value created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.SuccessfulLazy`1.Value">
            <summary>如果创建value时报错则会一直创建。</summary>
        </member>
        <member name="M:System.SuccessfulLazy`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:System.ExceptionExtension">
            <summary></summary>
        </member>
        <member name="M:System.ExceptionExtension.NoCatch(System.Exception,System.Action{System.Exception})">
            <summary></summary>
        </member>
        <member name="M:System.ExceptionExtension.UnwrapException(System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Net.Http.BasicAuthenticationHeaderValue">
            <summary>Basic AuthenticationHeaderValue</summary>
            <seealso cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />
        </member>
        <member name="M:System.Net.Http.BasicAuthenticationHeaderValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.BasicAuthenticationHeaderValue"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:System.Net.Http.HttpClientExtensions">
            <summary>
            Class HttpClientExtensions.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.SetBasicAuthentication(System.Net.Http.HttpClient,System.String,System.String)">
            <summary>
            Sets the basic authentication.
            </summary>
            <param name="client">The client.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.SetBearerToken(System.Net.Http.HttpClient,System.String)">
            <summary>
            Sets the bearer token.
            </summary>
            <param name="client">The client.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.SetToken(System.Net.Http.HttpClient,System.String,System.String)">
            <summary>
            Sets the token.
            </summary>
            <param name="client">The client.</param>
            <param name="scheme">The scheme.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.ReadAsAsync``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Reads as T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response">The response.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PostAsFormAsync``1(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts as form.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PostAsFormAsync``1(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String[])">
            <summary>
            Posts as form. <see href="https://stackoverflow.com/questions/18059588/httpclient-multipart-form-post-in-c-sharp">See here</see>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <param name="filesPath">The files path.</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtensions.PostAsFormAsync``1(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            Posts as form. <see href="https://stackoverflow.com/questions/18059588/httpclient-multipart-form-post-in-c-sharp">See here</see>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpClient">The HTTP client.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form.</param>
            <param name="files">The files. Key: File name, value: file read stream.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="T:System.LogicalStringComparer">
            <summary>逻辑字符串比较，2string比20string小</summary>
        </member>
        <member name="P:System.LogicalStringComparer.Default">
            <summary>忽略大小写</summary>
        </member>
        <member name="P:System.LogicalStringComparer.ComparisonType">
            <summary>比较方式</summary>
        </member>
        <member name="M:System.LogicalStringComparer.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:System.LogicalStringComparer.#ctor(System.StringComparison)">
            <summary>ctor</summary>
            <param name="comparisonType">比较方式</param>
        </member>
        <member name="M:System.LogicalStringComparer.Compare(System.String,System.String)">
            <summary>比较字符串</summary>
        </member>
        <member name="M:System.LogicalStringComparer.Equals(System.String,System.String)">
            <summary>字符串是否相等</summary>
        </member>
        <member name="M:System.LogicalStringComparer.GetHashCode(System.String)">
            <summary>GetHashCode</summary>
        </member>
        <member name="T:Common.Logging.LogExtension">
            <summary>LogExtension</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.DebugException(Common.Logging.ILog,System.Exception)">
            <summary>Debug级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.DebugException(Common.Logging.ILog,System.String,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.ErrorException(Common.Logging.ILog,System.Exception)">
            <summary>Error级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.ErrorException(Common.Logging.ILog,System.String,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.FatalException(Common.Logging.ILog,System.Exception)">
            <summary>Fatal级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.FatalException(Common.Logging.ILog,System.String,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.InfoException(Common.Logging.ILog,System.Exception)">
            <summary>Info级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.InfoException(Common.Logging.ILog,System.String,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.TraceException(Common.Logging.ILog,System.Exception)">
            <summary>Trace级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.TraceException(Common.Logging.ILog,System.String,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.WarnException(Common.Logging.ILog,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="M:Common.Logging.LogExtension.WarnException(Common.Logging.ILog,System.String,System.Exception)">
            <summary>Warn级别，获取第一个真实异常的Message</summary>
        </member>
        <member name="T:Tuhu.Models.ModelValidator">
            <summary>ModelValidator</summary>
        </member>
        <member name="T:Tuhu.Models.BaseModel">
            <summary>模型基类</summary>
        </member>
        <member name="M:Tuhu.Models.BaseModel.Parse(System.Data.DataRow,System.Reflection.PropertyInfo[])">
            <summary>Parse</summary>
        </member>
        <member name="M:Tuhu.Models.BaseModel.ToString">
            <summary>ToString</summary>
            <returns>JSON</returns>
        </member>
        <member name="T:Tuhu.Models.ColumnAttribute">
            <summary>添加额外的名称，属性名优先生效</summary>
        </member>
        <member name="M:Tuhu.Models.ColumnAttribute.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.ColumnAttribute.#ctor(System.String,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.ColumnAttribute.#ctor(System.Type,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.PropertyName">
            <summary>属性名</summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.Aliases">
            <summary>别名</summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.Type">
            <summary></summary>
        </member>
        <member name="P:Tuhu.Models.ColumnAttribute.Names">
            <summary>PropertyName + Aliases</summary>
        </member>
        <member name="T:Tuhu.Models.CollectionColumnAttribute">
            <summary>添加额外的名称，属性名优先生效</summary>
        </member>
        <member name="M:Tuhu.Models.CollectionColumnAttribute.#ctor(System.String[],System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.CollectionColumnAttribute.#ctor(System.Type,System.String[],System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="P:Tuhu.Models.CollectionColumnAttribute.Separator">
            <summary>默认[",", ";"]，只支持Array或IEnumerable&lt;&gt;</summary>
        </member>
        <member name="T:Tuhu.Models.JsonColumnAttribute">
            <summary>添加额外的名称，属性名优先生效</summary>
        </member>
        <member name="M:Tuhu.Models.JsonColumnAttribute.#ctor(System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.JsonColumnAttribute.#ctor(System.Type,System.String[])">
            <summary>ctor</summary>
        </member>
        <member name="T:Tuhu.Models.Chs2Py">
            <summary>
            汉字转化为拼音
            </summary>
        </member>
        <member name="M:Tuhu.Models.Chs2Py.Pinyin(System.String)">
            <summary>获取拼音</summary>
        </member>
        <member name="T:Tuhu.Models.PagedModel`1">
            <summary>列表模型</summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Tuhu.Models.PagedModel`1.Source">
            <summary>数据模型</summary>
        </member>
        <member name="P:Tuhu.Models.PagedModel`1.Pager">
            <summary>分页模型</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(Tuhu.Models.PagerModel)">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(Tuhu.Models.PagerModel,System.Collections.Generic.IEnumerable{`0})">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.#ctor(System.Collections.Generic.IEnumerable{`0},Tuhu.Models.PagerModel)">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 System.Collections.Generic.IEnumerator&lt;T&gt;。</returns>
        </member>
        <member name="M:Tuhu.Models.PagedModel`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 System.Collections.IEnumerator。</returns>
        </member>
        <member name="T:Tuhu.Models.PagerModel">
            <summary>分页模型</summary>
        </member>
        <member name="M:Tuhu.Models.PagerModel.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.Models.PagerModel.#ctor(System.Int32)">
            <summary>ctor</summary>
            <param name="currentPage">当前页</param>
        </member>
        <member name="M:Tuhu.Models.PagerModel.#ctor(System.Int32,System.Int32)">
            <summary>ctor</summary>
            <param name="currentPage">当前页</param>
            <param name="pageSize">页大小，默认20</param>
        </member>
        <member name="P:Tuhu.Models.PagerModel.CurrentPage">
            <summary>当前页，默认为第一页</summary>
        </member>
        <member name="P:Tuhu.Models.PagerModel.PageSize">
            <summary>每页数量，默认为20</summary>
        </member>
        <member name="P:Tuhu.Models.PagerModel.Total">
            <summary>总项目数</summary>
        </member>
        <member name="P:Tuhu.Models.PagerModel.TotalPage">
            <summary>总页数</summary>
        </member>
        <member name="T:Tuhu.DbHelper">
            <summary>数据访问封装。XXXReadOnly优先XXX_ReadOnly，都表示只读</summary>
            <summary>数据访问封装</summary>
        </member>
        <member name="F:Tuhu.DbHelper.ConnectionCache">
            <summary>
            The connection cache
            </summary>
        </member>
        <member name="M:Tuhu.DbHelper.CreateDbHelper">
            <summary>创建默认的数据库连接</summary>
        </member>
        <member name="M:Tuhu.DbHelper.CreateDbHelper(System.Boolean)">
            <summary>创建默认的数据库连接</summary>
            <param name="readOnly">是否连接到只读库，默认为false</param>
        </member>
        <member name="M:Tuhu.DbHelper.CreateDbHelper(System.String)">
            <summary>
            创建Sql Server数据库连接
            </summary>
            <param name="connectionNameOrConnectionString">连接名称或连接字符串，连接字符串只支持SqlServer</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateDbHelper(System.String,System.Boolean)">
            <summary>
            创建Sql Server数据库连接
            </summary>
            <param name="connectionName">连接字符串名称</param>
            <param name="readOnly">是否只读。如果是sqlserver则支持连接名或连接字符串，其他数据库只支持连接名</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateDbHelper(System.Configuration.ConnectionStringSettings)">
            <summary>
            创建Sql Server数据库连接
            </summary>
            <param name="connectionStringName">连接名称或连接字符串，连接字符串只支持SqlServer</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateDbHelper(System.String,System.String)">
            <summary>
            创建Sql Server数据库连接
            </summary>
            <param name="providerName">The provider name.</param>
            <param name="connectionString">连接字符串</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateDbHelper(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            创建Sql Server数据库连接
            </summary>
            <param name="providerFactory">The provider factory.</param>
            <param name="connectionString">连接字符串</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateCacheDbHelper">
            <summary>
            Creates the cache database helper.
            </summary>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateCacheDbHelper(System.Boolean)">
            <summary>
            Creates the cache database helper.
            </summary>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateLogDbHelper">
            <summary>创建日志数据库的连接</summary>
        </member>
        <member name="M:Tuhu.DbHelper.CreateLogDbHelper(System.Boolean)">
            <summary>
            创建日志数据库的连接，如果没有Log连接字符串则使用Cache
            </summary>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateWmsDbHelper">
            <summary>创建Wms数据库的连接</summary>s
        </member>
        <member name="M:Tuhu.DbHelper.CreateWmsDbHelper(System.Boolean)">
            <summary>
            创建Wms数据库的连接
            </summary>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateTmsDbHelper(System.Boolean)">
            <summary>
            创建Tms数据库的连接
            </summary>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateAppDbHelper">
            <summary>创建App数据库的连接</summary>s
        </member>
        <member name="M:Tuhu.DbHelper.CreateAppDbHelper(System.Boolean)">
            <summary>
            创建App数据库的连接
            </summary>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateYewuDbHelper">
            <summary>创建App数据库的连接</summary>s
        </member>
        <member name="M:Tuhu.DbHelper.CreateYewuDbHelper(System.Boolean)">
            <summary>
            创建App数据库的连接
            </summary>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.CreateShopDbHelper">
            <summary>创建App数据库的连接</summary>s
        </member>
        <member name="M:Tuhu.DbHelper.CreateShopDbHelper(System.Boolean)">
            <summary>
            创建App数据库的连接
            </summary>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
            <returns>BaseDbHelper.</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteQuery``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})">
            <summary>
            针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">Sql命令</param>
            <param name="func">结果构造方法</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteQuery``1(System.Boolean,System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})">
            <summary>
            针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <param name="func">结果构造方法</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteQueryAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})">
            <summary>
            针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">Sql命令</param>
            <param name="func">结果构造方法</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteQueryAsync``1(System.Boolean,System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})">
            <summary>
            针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <param name="func">结果构造方法</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmd">Sql命令</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQuery(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmd">Sql命令</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteNonQueryAsync(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmd">Sql命令</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalar(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmd">Sql命令</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteScalarAsync(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelect``1(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteSelectAsync``1(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetch``1(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.Boolean,System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.Boolean,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.Boolean,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.DbHelper.ExecuteFetchAsync``1(System.Boolean,System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="readOnly">是否连只读库，默认为false</param>
            <param name="cmd">Sql命令</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="T:Tuhu.BaseDbHelper">
            <summary>
            Class BaseDbHelper.
            </summary>
            <seealso cref="T:System.Data.IDbTransaction" />
        </member>
        <member name="M:Tuhu.BaseDbHelper.#ctor(System.Data.Common.DbProviderFactory,System.String)">
            <summary>ctor</summary>
            <param name="factory"></param>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="P:Tuhu.BaseDbHelper.DbProvider">
            <summary>
            Gets the database provider.
            </summary>
            <value>The database provider.</value>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateCommand">
            <returns>DbCommand</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateCommand(System.String)">
            <summary>
            创建DbCommand
            </summary>
            <param name="cmdString">The command string.</param>
            <returns>DbCommand</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            创建DbCommand
            </summary>
            <param name="cmdString">The command string.</param>
            <param name="commandType">Type of the command.</param>
            <returns>DbCommand</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateCommand(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            创建DbCommand
            </summary>
            <param name="cmdString">The command string.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>DbCommand</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateCommand(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            创建DbCommand
            </summary>
            <param name="cmdString">The command string.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>DbCommand</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateDataAdapter">
            <summary>
            Creates the data adapter.
            </summary>
            <returns>DbDataAdapter.</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateDataAdapter(System.String)">
            <summary>
            Creates the data adapter.
            </summary>
            <param name="cmdString">The command string.</param>
            <returns>DbDataAdapter.</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            Creates the data adapter.
            </summary>
            <param name="cmd">The command.</param>
            <returns>DbDataAdapter.</returns>
        </member>
        <member name="P:Tuhu.BaseDbHelper.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:Tuhu.BaseDbHelper.Connection">
            <summary>
            Specifies the Connection object to associate with the transaction.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:Tuhu.BaseDbHelper.IsolationLevel">
            <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.
            </summary>
            <value>The isolation level.</value>
        </member>
        <member name="M:Tuhu.BaseDbHelper.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Tuhu.BaseDbHelper.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Tuhu.BaseDbHelper.BeginTransactionAsync">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Tuhu.BaseDbHelper.BeginTransactionAsync(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Tuhu.BaseDbHelper.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:Tuhu.BaseDbHelper.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:Tuhu.BaseDbHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Tuhu.BaseDbHelper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmd">Sql命令</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQueryAsync(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmd">Sql命令</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmd">Sql命令</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalarAsync(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmd">Sql命令</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回多个查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>多个查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteDataSetAsync(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回多个查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>多个查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteDataTable(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteDataTableAsync(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelect``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单行查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>单行查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelectAsync``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单行查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>单行查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetch``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单行查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>单条查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetchAsync``1(System.Data.Common.DbCommand)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单行查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <returns>单条查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteQuery``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单行查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <param name="func">结果构造方法</param>
            <returns>单条查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteQueryAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单行查询结果。</summary>
            <param name="cmd">Sql命令</param>
            <param name="func">结果构造方法</param>
            <returns>单条查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQuery(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQueryAsync(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalar(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalarAsync(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回结果集中第一行的第一列。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelect``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelect``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelect``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelectAsync``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelectAsync``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteSelectAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetch``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetch``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetch``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetchAsync``1(System.String)">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetchAsync``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="M:Tuhu.BaseDbHelper.ExecuteFetchAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回单个查询结果。</summary>
            <param name="cmdString">Sql语句</param>
            <param name="commandType">Sql类型</param>
            <param name="parameters">Sql参数</param>
            <returns>单个查询结果。</returns>
        </member>
        <member name="T:Tuhu.ZipHelper">
            <summary>压缩解压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.String,System.String)">
            <summary>压缩到档案</summary>
            <param name="outputFile">档案位置</param>
            <param name="fileOrDirectory">文件或文件夹</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="outputFile">档案位置</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="outputFile">档案位置</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
            <param name="ignoreFilesOrDirectories">过滤的文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.IO.Stream,System.String)">
            <summary>压缩到档案</summary>
            <param name="output">输出流</param>
            <param name="fileOrDirectory">文件或文件夹</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.IO.Stream,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="output">输出流</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Zip(System.IO.Stream,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>压缩到档案</summary>
            <param name="output">输出流</param>
            <param name="baseDirectory">基目录</param>
            <param name="filesOrDirectories">文件或文件夹列表</param>
            <param name="ignoreFilesOrDirectories">过滤的文件或文件夹列表</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Dezip(System.String,System.String)">
            <summary>解压缩到档案</summary>
            <param name="inputFile">输入文档</param>
            <param name="outputDirectory">输出目录</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Dezip(System.IO.Stream,System.String)">
            <summary>解压缩到档案</summary>
            <param name="inputStream">输入流</param>
            <param name="outputDirectory">输出目录</param>
        </member>
        <member name="M:Tuhu.ZipHelper.GetFileList(System.String)">
            <summary>获得文档中的所有文件名称</summary>
            <param name="inputFile">输入文档</param>
        </member>
        <member name="M:Tuhu.ZipHelper.GetFileList(System.IO.Stream)">
            <summary>获得文档中的所有文件名称</summary>
            <param name="input">输入流</param>
        </member>
        <member name="M:Tuhu.ZipHelper.Compress(System.Byte[])">
            <summary>Gzip压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Compress(System.IO.Stream)">
            <summary>Gzip压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.CompressAsync(System.IO.Stream)">
            <summary>Gzip压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Decompress(System.Byte[])">
            <summary>Gzip解压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.Decompress(System.IO.Stream)">
            <summary>Gzip解压缩</summary>
        </member>
        <member name="M:Tuhu.ZipHelper.DecompressAsync(System.IO.Stream)">
            <summary>Gzip解压缩</summary>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String)">
            <summary>
            Gets the image URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetMobileUrl(System.String)">
            <summary>
            Gets the mobile URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String,System.Int32)">
            <summary>
            Gets the image URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidthHeight">Maximum height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetMobileUrl(System.String,System.Int32)">
            <summary>
            Gets the mobile URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidthHeight">Maximum height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the image URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetMobileUrl(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the mobile URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageUrl(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>处理图片地址</summary>
            <param name="url">图片地址。绝对地址或相对地址</param>
            <param name="maxWidth">最大宽</param>
            <param name="maxHeight">最大高</param>
            <param name="mobile">是否是用于手机显示</param>
            <returns>处理后的图片地址</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetImageFormat(System.String)">
            <summary>将输入格式转换成标准输出格式</summary>
            <param name="url"></param>
            <returns>bmp gif psd tiff转换成png</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetProductImage(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the product image.
            </summary>
            <param name="input">The input.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetProductImage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the product image.
            </summary>
            <param name="input">The input.</param>
            <param name="productDefinition">The product definition.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetVehicleImage(System.String,System.Int32)">
            <summary>
            Gets the vehicle image.
            </summary>
            <param name="vehicleId">The vehicle identifier.</param>
            <param name="widthHeight">Height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetVehicleImage(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the vehicle image.
            </summary>
            <param name="vehicleId">The vehicle identifier.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetShopImage(System.String,System.Int32)">
            <summary>
            Gets the shop image.
            </summary>
            <param name="input">The input.</param>
            <param name="widthHeight">Height of the width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetShopImage(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the shop image.
            </summary>
            <param name="input">The input.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.GetLogoUrlByName(System.String)">
            <summary>
            获取Logo图片地址(汉字转化为拼音)
            </summary>
            <param name="brand">品牌名称</param>
            <returns>Url</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.Reduces(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>缩小图片</summary>
            <param name="rawImage">图片</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns>缩小后的图片</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.Reduces(System.Drawing.Image,System.Int32,System.Int32,System.Boolean,System.Drawing.Color)">
            <summary>缩小图片</summary>
            <param name="rawImage">图片</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="fixedSize">true：尺寸固定；false：等比例</param>
            <param name="fillColor">背景填充颜色</param>
            <returns>缩小后的图片</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.SaveAsByteArray(System.Drawing.Image)">
            <summary>
            Saves as byte array.
            </summary>
            <param name="image">The image.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.SaveAsByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves as byte array.
            </summary>
            <param name="image">The image.</param>
            <param name="format">The format.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.RotateFlip(System.Drawing.Image)">
            <summary>自动旋转图片</summary>
            <param name="img">图片</param>
            <returns>是否旋转</returns>
        </member>
        <member name="M:Tuhu.ImageHelper.CutImage(System.Drawing.Image,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Cuts the image.
            </summary>
            <param name="image">The image.</param>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns>Image.</returns>
        </member>
        <member name="T:Tuhu.SecurityHelper">
            <summary>安全性相关类</summary>
        </member>
        <member name="M:Tuhu.SecurityHelper.ValidatePassword(System.String,System.String)">
            <summary>验证密码</summary>
            <param name="password">原始密码</param>
            <param name="hashedPassword">Hash后的密码</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.HashPassword(System.String)">
            <summary>Hash密码</summary>
            <param name="password">原始密码</param>
            <returns>Hash后的密码</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.BinaryToHex(System.Byte[])">
            <returns>大写</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.BinaryToHex(System.Byte[],System.Boolean)">
            <summary>
            Binaries to hexadecimal.
            </summary>
            <param name="data">The data.</param>
            <param name="lower">if set to <c>true</c> [lower].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.HexToBinary(System.String)">
            <summary>
            Hexadecimals to binary.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentException">
            输入参数的长度异常，必须是2的倍数
            or
            输入字符串格式错误
            </exception>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,System.Boolean)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,Tuhu.HashType)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="hashType">Hash类型</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,Tuhu.HashType,System.Boolean)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="hashType">Hash类型</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,System.Text.Encoding)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="encoding">编码类型</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,System.Text.Encoding,System.Boolean)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="encoding">编码类型</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.String,Tuhu.HashType,System.Text.Encoding,System.Boolean)">
            <summary>Hash加密</summary>
            <param name="inputString">输入内容</param>
            <param name="hashType">Hash类型</param>
            <param name="encoding">编码类型</param>
            <param name="lower">输出是否小写</param>
            <returns>Hash结果</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.Byte[])">
            <summary>Hash加密</summary>
            <param name="buffer">输入内容</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Hash(System.Byte[],Tuhu.HashType)">
            <summary>Hash加密</summary>
            <param name="buffer">输入内容</param>
            <param name="hashType">Hash类型</param>
            <returns>Hash结果（大写）</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetSymmetricAlgorithm(System.String,System.String)">
            <summary>获取对称算法</summary>
            <param name="key">key</param>
            <param name="iv">iv</param>
            <returns>算法</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetSymmetricAlgorithm(Tuhu.SymmetricAlgorithmType,System.String,System.String)">
            <summary>获取对称算法</summary>
            <param name="type">算法类型</param>
            <param name="key">key</param>
            <param name="iv">iv</param>
            <returns>算法</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Decrypts the specified base64 string.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="base64String">The base64 string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypts the specified encrypted buffer.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="encryptedBuffer">The encrypted buffer.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Encrypts the specified buffer.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.GetSignContent(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets the content of the sign.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSASign(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            签名
            </summary>
            <param name="parameters"></param>
            <param name="privateKeyPem"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSASign(System.String,System.String)">
            <summary>
            签名
            </summary>
            <param name="data"></param>
            <param name="privateKeyPem"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSASign(System.String,System.String,System.String)">
            <summary>
            签名
            </summary>
            <param name="data"></param>
            <param name="privateKeyPem"></param>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSACheckV1(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            验签1
            </summary>
            <param name="parameters"></param>
            <param name="publicKeyPem"></param>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSACheckV1(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            RSAs the check v1.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="publicKeyPem">The public key pem.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSACheckV2(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            验签2
            </summary>
            <param name="parameters"></param>
            <param name="publicKeyPem"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSACheckV2(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            RSAs the check v2.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="publicKeyPem">The public key pem.</param>
            <param name="charset">The charset.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSACheckContent(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="signContent"></param>
            <param name="sign"></param>
            <param name="publicKeyPem"></param>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.CheckSignAndDecrypt(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            验签，解密
            </summary>
            <param name="parameters"></param>
            <param name="publicKey"></param>
            <param name="cusPrivateKey"></param>
            <param name="isCheckSign"></param>
            <param name="isDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSAEncrypt(System.String,System.String,System.String)">
            <summary>
            加密处理
            </summary>
            <param name="content"></param>
            <param name="publicKeyPem">
            -----BEGIN PUBLIC KEY-----
            MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDwop6n65653EzEuNbgR4Ft5Mlu6FPNJfS60uBHaIVkOTV+yyVIAzLiCsQyCHIdNoieEzF09GGxNzKOKpgBGsGoSkX5qZLhxj5YMXlTwSYU6XyXuw7l40jD5BajQWbNbDhAjd1kV3KaS6p61ngXBCHNtQZsTJkUaKsMl4YCwVhC+wIDAQAB
            -----END PUBLIC KEY----- 
            </param>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.RSADecrypt(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="privateKeyPem"></param>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.DecodePemPrivateKey(System.String)">
            <summary>
            对prikey进行处理，C#API默认的prikey是xml格式的，所以需要进行处理
            </summary>
            <param name="pemstr"></param>
            <returns></returns>
        </member>
        <member name="M:Tuhu.SecurityHelper.DecodePrivateKeyInfo(System.Byte[])">
            <summary>
            转换prikey
            </summary>
            <param name="pkcs8"></param>
            <returns></returns>
        </member>
        <member name="T:Tuhu.HashType">
            <summary>HashType</summary>
        </member>
        <member name="F:Tuhu.HashType.Md5">
            <summary>MD5</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha1">
            <summary>SHA1</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha256">
            <summary>SHA256</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha384">
            <summary>SHA384</summary>
        </member>
        <member name="F:Tuhu.HashType.Sha512">
            <summary>SHA512</summary>
        </member>
        <member name="T:Tuhu.SymmetricAlgorithmType">
            <summary>
            Enum SymmetricAlgorithmType
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Aes">
            <summary>
            The aes
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Des">
            <summary>
            The DES
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Rc2">
            <summary>
            The RC2
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.TripleDes">
            <summary>
            The triple DES
            </summary>
        </member>
        <member name="F:Tuhu.SymmetricAlgorithmType.Rijndael">
            <summary>
            The rijndael
            </summary>
        </member>
        <member name="T:Tuhu.IDataFormatter">
            <summary>数据格式化器</summary>
        </member>
        <member name="M:Tuhu.IDataFormatter.Deserialize``1(System.Byte[])">
            <summary>反序列化</summary>
            <typeparam name="T">类型</typeparam>
            <param name="data">数据</param>
            <returns>对象</returns>
        </member>
        <member name="M:Tuhu.IDataFormatter.Serialize(System.Object)">
            <summary>序列化</summary>
            <param name="objData">对象</param>
            <returns>数据</returns>
        </member>
        <member name="M:Tuhu.DataFormatter.Deserialize``1(System.Byte[])">
            <summary>反序列化</summary>
            <typeparam name="T">类型</typeparam>
            <param name="data">数据</param>
            <returns>对象</returns>
        </member>
        <member name="M:Tuhu.DataFormatter.Serialize(System.Object)">
            <summary>序列化</summary>
            <param name="objData">对象</param>
            <returns>数据</returns>
        </member>
        <member name="T:Tuhu.JsonDataFormatter">
            <summary>数据Json格式化器，使用Json.net</summary>
        </member>
        <member name="P:Tuhu.JsonDataFormatter.Settings">
            <summary>JsonSerializerSettings</summary>
        </member>
        <member name="M:Tuhu.JsonDataFormatter.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Tuhu.JsonDataFormatter.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>ctor</summary>
            <param name="settings">JsonSerializerSettings</param>
        </member>
        <member name="T:Tuhu.XmlDataFormatter">
            <summary>数据二进制格式化器，使用BinaryFormatter</summary>
        </member>
    </members>
</doc>
